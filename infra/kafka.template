{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys an autoscaled Kafka cluster.",
  "Parameters": {
    "InitialStackName": {
      "Description": "Name of an active CloudFormation stack that contains the initial resources.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "initial"
    },
    "ZooKeeperStackName": {
      "Description": "Name of an active CloudFormation stack that contains the ZooKeeper resources.",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default": "initial"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "KafkaInstanceType": {
      "Description": "Kafka EC2 instance type",
      "Type": "String",
      "Default": "t2.small"
    },
    "KafkaAMI": {
      "Description": "Kafka AMI",
      "Type": "String",
      "Default": "ami-f4cc1de2"
    },
    "MinInstances": {
      "Description": "Minimum number of instances",
      "Type": "Number",
      "Default": "1"
    },
    "MaxInstances": {
      "Description": "Maximum number of instances",
      "Type": "Number",
      "Default": "3"
    },
    "DesiredInstances": {
      "Description": "Desired number of instances",
      "Type": "Number",
      "Default": "1"
    },
    "SizeOfLogVolume": {
      "Description": "Size (GB) of the Kafka log EBS volume for each instance",
      "Type": "Number",
      "Default": "8"
    },
    "KafkaVersion": {
      "Description": "The version of Kafka",
      "Type": "String",
      "Default": "0.10.2.0"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "SizeOfLogVolume"
              }
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "KafkaAMI"
        },
        "SecurityGroups": [
          {
            "Ref": "KafkaInstanceSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "KafkaInstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",

                "# Wait for EBS mounts to become available\n",
                "while [ ! -e /dev/xvdf ]; do echo waiting for /dev/xvdf to attach; sleep 10; done\n",
                "mkfs -t ext4 /dev/xvdf\n",
                "mkdir /var/kafka-logs\n",
                "mount /dev/xvdf /var/kafka-logs\n",
                "rm -rf /var/kafka-logs/*\n",

                "useradd -r -s /bin/false kafka\n",
                "chown kafka:kafka /var/kafka-logs -R\n",

                "apt-get update && apt-get -y install bc openjdk-8-jdk ntp\n",
                "cd /opt/\n",
                "wget http://apache.spinellicreations.com/kafka/", {"Ref": "KafkaVersion"}, "/kafka_2.12-", {"Ref": "KafkaVersion"}, ".tgz\n",
                "gunzip -c kafka_2.12-", {"Ref": "KafkaVersion"}, ".tgz | tar xvf -\n",
                "mv kafka_2.12-", {"Ref": "KafkaVersion"}, "/ kafka\n",
                "ZOOKEEPER_IPS=",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": "${ZooKeeperStackName}-ZooKeeperIPAddresses"
                  }
                },
                "\n",
                "IP=`wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4`\n",

                "# TODO: Improve this. Used from http://tech.gc.com/scaling-with-kafka/\n",
                "FOURTHPOWER=`echo '256^3' | bc`\n",
                "THIRDPOWER=`echo '256^2' | bc`\n",
                "SECONDPOWER=`echo '256^1' | bc`\n",
                "FOURTHIP=`echo $IP | cut -d '.' -f 1`\n",
                "THIRDIP=`echo $IP | cut -d '.' -f 2`\n",
                "SECONDIP=`echo $IP | cut -d '.' -f 3`\n",
                "FIRSTIP=`echo $IP | cut -d '.' -f 4`\n",
                "BROKER_ID=`expr $FOURTHIP \\* $FOURTHPOWER + $THIRDIP \\* $THIRDPOWER + $SECONDIP \\* $SECONDPOWER + $FIRSTIP`\n",

                "# TODO: Set these properties without overwriting the whole file.\n",
                "echo \"broker.id=$BROKER_ID\" > kafka/config/server.properties\n",
                "echo \"port=9092\" >> kafka/config/server.properties\n",
                "echo \"host.name=$IP\" >> kafka/config/server.properties\n",
                "echo \"num.network.threads=3\" >> kafka/config/server.properties\n",
                "echo \"num.io.threads=8\" >> kafka/config/server.properties\n",
                "echo \"socket.send.buffer.bytes=102400\" >> kafka/config/server.properties\n",
                "echo \"socket.receive.buffer.bytes=102400\" >> kafka/config/server.properties\n",
                "echo \"socket.request.max.bytes=104857600\" >> kafka/config/server.properties\n",
                "echo \"log.dirs=/var/kafka-logs\" >> kafka/config/server.properties\n",
                "echo \"num.partitions=1\" >> kafka/config/server.properties\n",
                "echo \"num.recovery.threads.per.data.dir=1\" >> kafka/config/server.properties\n",
                "echo \"log.retention.hours=168\" >> kafka/config/server.properties\n",
                "echo \"log.segment.bytes=1073741824\" >> kafka/config/server.properties\n",
                "echo \"log.retention.check.interval.ms=300000\" >> kafka/config/server.properties\n",
                "echo \"log.cleaner.enable=false\" >> kafka/config/server.properties\n",
                "echo \"zookeeper.connect=$ZOOKEEPER_IPS\" >> kafka/config/server.properties\n",
                "echo \"zookeeper.connection.timeout.ms=6000\" >> kafka/config/server.properties\n",

                "chown kafka:kafka /opt/kafka -R\n",
                "runuser -l kafka -c 'kafka/bin/kafka-server-start.sh kafka/config/server.properties &'"
              ]
            ]
          }
        }
      }
    },
    "KafkaAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "MinSize": {
          "Ref": "MinInstances"
        },
        "MaxSize": {
          "Ref": "MaxInstances"
        },
        "DesiredCapacity": {
          "Ref": "DesiredInstances"
        },
        "LoadBalancerNames": [
          {
            "Ref": "KafkaLoadBalancer"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Kafka",
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${InitialStackName}-Subnet1ID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${InitialStackName}-Subnet2ID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${InitialStackName}-Subnet3ID"
            }
          }
        ]
      }
    },
    "KafkaLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": "KafkaLoadBalancer",
        "SecurityGroups": [
          {
            "Ref": "KafkaLoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${InitialStackName}-Subnet1ID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${InitialStackName}-Subnet2ID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${InitialStackName}-Subnet3ID"
            }
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "9092",
            "InstancePort": "9092",
            "Protocol": "HTTP"
          }
        ]
      }
    },
    "KafkaLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Kafka Load Balancer Security Group",
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${InitialStackName}-VPCID"
          }
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "KafkaInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Group for Kafka instances",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${InitialStackName}-VPCID"
          }
        }
      }
    }
  },
  "Outputs": {
    "KafkaVersion": {
      "Description": "Kafka Version",
      "Value": {"Ref": "KafkaVersion"}
    }
  }
}